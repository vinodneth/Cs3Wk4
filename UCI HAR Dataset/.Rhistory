rm(list=ls())
library(swirl)
swirl()
library(dplyr)
class(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,"package")
by_package <- group_by(cran,package)
by_package
summarize(cran,size,mean())
summarize(cran,mean(size))
?summarize
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count()))
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tb_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",users in "IN")
View(cran)
filter(cran,r_version<="3.0.2",country in "IN")
filter(cran,r_version<="3.0.2",country in ("IN")
filter(cran,r_version<="3.0.2",country in ("IN"))
filter(cran,r_version<="3.0.2",country == "IN")
filter(cran,country == "US" | country == "IN")
filter(cran,r_os=="linux-gnu",size>100500)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.NA(R.version))
filter(cran,!is.na(R.version))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size=mb=size/2^20)
mutate(cran3,size_mb=size/2^20)
mutuate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tdl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
filter(pack_sum,count(>679))
filter(pack_sum,count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
filter(pack_sum,unique>465)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(pack_sum,desc(unique))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
student2
students2
gather(students2,sex,count,-grade)
gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?seperate
?separate
separate(res,col=sex_class,into=c("sex","class"))
submit()
students3
?gather
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
passed<-mutuate(passed,passed$status="passed")
?mutuate
passed<-mutate(passed,passed$status="passed")
?mutate
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
packageVersion('dplyr')
bind_rows(passed,failed)
sat
?select
?separate
submit()
submit()
library(dplyr)
ACSD<-read.csv("ACSComm.csv",stringsAsFactors = FALSE)
str(ACSD)
mydf<_tbl_df(ACSD)
mydf<-tbl_df(ACSD)
summary(mydf)
unique(mydf[ACR])
unique(mydf[,"ACR"])
unique(mydf[,"AGS"])
result<-filter(mydf,ACR==3&AGS==6)
result
?subset
agricultureLogical<-subset(mydf,ACR==3&AGS==6)
class(agricultureLogical)
result[,"SERIALNO"]
agricultureLogical<-as.vector(result[,"SERIALNO"])
class(agricultureLogical)
agricultureLogical<-result[,"SERIALNO"]
class(agricultureLogical)
agricultureLogical
summarize(result)
result
sort(result[,"SERIALNO"])
arrange(result,SERIALNO)
result2<-arrange(result,SERIALNO)
result2
result<-ACSD[ACSD$ACR==3&ACSD$AGS==6,]
class(result)
which(result)
result
View(result)
result<-!is.na(ACSD[ACSD$ACR==3&ACSD$AGS==6,])
which(result)
install.packages("jpeg")
myjp<-readJPEG("jeff.jpeg",TRUE)
library(jpeg)
myjp<-readJPEG("jeff.jpeg",TRUE)
myjp<-readJPEG("jeff.JPEG",TRUE)
myjp<-readJPEG("jeff.jpg",TRUE)
class(myjp)
myjp
quantile(myjp,prob(0.3,0.8))
?quantiles
library(plyr)
quantile(myjp,prob=c(0.3,0.8))
gdp<-read.csv("GDP.csv",stringsAsFactors = FALSE)
edu<-read.csv("EDU.csv",stringsAsFactors = FALSE)
View(edu)
View(gdp)
?merge
?intersect
intersect(gdp,edu)
?intersect
compare(gdp,edu)
library(compare)
library('compare'')
library('compare')
require(sqldf)
semi_join(gdp,edu)
?semi_join
semi_join(gdp,edu,by=c("X"="CountryCode"))
comrows<-semi_join(gdp,edu,by=c("X"="CountryCode"))
?merge
mydata<-merge(gdp,edu,by=c("X"="CountryCode"))
?join
View(comrows)
comrows<-semi_join(edu,gdp,by=c("CountryCode"="X"))
View(comrows)
together<-merge(edu,gdp,by.x="CountryCode",by.y="X",all=FALSE)
View(together)
unique(together[,"CountryCode"])
count(unique(together[,"CountryCode"]))
together2<-arrange(together,Gross.domestic.product.2012)
unique(together[,"CountryCode"])
together[,"CountryCode"]
together2[,"CountryCode"]
View(together2)
together2<-arrange(together,desc(Gross.domestic.product.2012)
)
gdp<-read.csv("GDP.csv",stringsAsFactors = FALSE,skip=4)
View(gdp)
together<-merge(edu,gdp,by.x="CountryCode",by.y="X",all=FALSE)
together2<-arrange(together,desc(X.1))
grpby<-group_by(together,Income.Group)
summarize(grpby,mean=mean(X.1))
?summarize
summarize(grpby,m=mean("X.1"))
summarize(group_by(together,Income.Group),n())
summarize(group_by(together,Income.Group),mean(X.1))
together[,"Income.Group"]
together[,"X.1"]
summarize(group_by(together,Income.Group),sum(X.1))
summarize(group_by(together,Income.Group),sum=sum(X.1))
together2<-mutate(together,together$NumRank=is.numeric(X.1))
together2<-mutate(together,NumRank=is.numeric(X.1))
together3<-arrange(together2,desc(NumRank)
)
View(together3)
together2<-mutate(together,NumRank=as.numeric(X.1))
together3<-arrange(together2,desc(NumRank))
summarize(group_by(together2,Income.Group),sum=sum(NumRank))
summarize(group_by(together2,Income.Group),sum=n()0
summarize(group_by(together2,Income.Group),sum=n())
summarize(group_by(together2,Income.Group),sum=count())
summarize(group_by(together2,Income.Group),sum=count)
summarize(group_by(together2,Income.Group),sum=sum(NumRank))
summarize(group_by(together2,Income.Group),sum=sum(!is.na(NumRank)))
together4<-group_by(together2,Income.Group)
together4
summarize(together4)
summarize(together4,mean(!is.na(NumRank)))
write.csv(together3,"merge.csv")
install.packages("Hmisc")
?cut
together3$RankGrp=cut(together3$NumRank,g=5)
together3$RankGrp=cut(together3$NumRank,breaks = =5)
cut(together3$NumRank,breaks = =5)
cut(together3$NumRank,breaks = 5)
together3$RankGrp=cut(together3$NumRank,breaks = 5)
tables(togther3$Income.Group,together3$RankGrp)
table(togther3$Income.Group,together3$RankGrp)
?table
table(together3$RankGrp)
table(together3$Income.Group)
table(together3$RankGrp,together3$Income.Group)
?tolower
gdptemp<-gdp
gdp<-read.csv("GDP.CSV",skip=4,stringsAsFactors = FALSE)
View(gdp)
gdptemp<-gdp
names(gdptemp)
tolower(names(gdptemp))
names(gdptemp)
?strsplit
splitnames<-strsplit(names(gdptemp),"\\.")
splitnames
firstelement < function(x){x[1]}
firstelement <- function(x){x[1]}
sapply(splitnames,firstelement)
firstelement <- function(x){x[2]}
sapply(splitnames,firstelement)
view(gdptemp)
View(gdptemp)
?sub
sub(".","",names(gdptemp),)
names(gdptemp)
sub("X","Y",names(gdptemp),)
sub("\\.","",names(gdptemp),)
chgnames<-sub("\\.","",names(gdptemp),)
colnames(gdptemp)<- chgnames
View(gdptemp)
rm(list=ls())
library(swirl)
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day<-today()
this_day
month(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("192012  ")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
class(dt2)
as.date(dt2)
as_date(dt2)
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment<-update(this_moment,minutes=55, seconds=10)
this_moment<-update(this_moment,hours=10, minutes=16, seconds=0)
this_moment
now()
now("America/New_York")
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
with_tz(arrive,"Asia/Hong_Kong")
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?interval
interval(last_time,arrive)
how_long<-\interval(last_time,arrive)
how_long<-interval(last_time,arrive)
class(how_long)
as.period(how_long)
stopwatch()
acs<-read.csv("ACSexp.csv",stringsAsFactors = FALSE)
View(acs)
names(acs)
strsplit(names(acs),"wgtp")
sptemp<-strsplit(names(acs),"wgtp")
sptemp[123]
rm(acs)
rm(sptemp)
gdp<-read.csv("GDPexp.csv",stringsAsFactors = FALSE)
View(gdp)
gdp<-read.csv("GDPexp.csv",stringsAsFactors = FALSE,skip=4)
?apply
gdped<-apply(gdp$X.4,1,sub,",","")
gdp$X.4
gdped<-apply(gdp$X.4,1,is.na)
dim(gdp)
dim(gdp$X.4)
class(gdp$X.4)
gdped<-apply(gdp[,"X.4"],1,is.na)
gdp[,"X.4"]
gdped<-apply(gdp[,"X.4"],2,is.na)
gdped<-apply(gdp$X.4,2,is.na)
gdped<-apply(gdp,2,is.na)
View(gdped)
gdped<-apply(gdp,2,sub,",","")
gdpDol<-gdp$X.4
View(gdpDol)
class(gdpDol)
length(gdpDol)
gdpDol
gdpEd<-apply(gdpDol,1,sub,",","")
gdpEd<-apply(gdpDol,2,sub,",","")
dim(gdpDol)
?str_replace_all
gdped<-apply(gdp[,5],1,sub,",","")
gdp[,5]
gdped<-apply(gdp[,5],1,count)
gdped<-apply(gdp,1,count)
gdped<-apply(gdp,1,sum)
gdped<-apply(gdp,2,sum)
gdped<-apply(gdp,2,is.na)
gdped<-apply(gdp$X.4,2,is.na)
gdped<-apply(gdp$X.4,1,is.na)
gdped<-apply(gdp,2,sub(",",""))
gdp$X.4<-gsub(",","",gdp$X.4)
View(gdp)
sum(as.numeric(gdp$X.4))
sum(as.numeric(!is.na(gdp$X.4))
)
gdped<-gdp[,!is.na(gdp$X.4)]
gdped<-gdp[,!gdp$X.4==NA]
gdped<-gdp[,gdp$X.4=!NA]
gdped<-gdp[gdp$X.4=!NA,]
gdped<-gdp[!is.na(gdp$X.4),]
View(gdped)
sum(as.numeric(!is.na(gdped$X.4))
)
sum(as.numeric(gdped$X.4)
)
sum(gdped$X.4)
apply(gdped,2,sum)
apply(gdped,1,sum)
apply(gdped$X.4,1,sum)
apply(gdped$X.4,1,sum(as.numeric()))
library(plyr)
gdped=mutate(gdped,gdped$Y=as.numeric(gdped$X.4)
gdped<-mutate(gdped,gdped$Y=as.numeric(gdped$X.4)
?mutate
gdped<-mutate(gdped,Y=as.numeric(X.4)
)
View(gdped)
sum(gdped$Y)
mean(gdped$X.4,na.rm=TRUE)
mean(as.numeric(gdped$X.4),na.rm=TRUE)
write.csv(gdped,"tmpgdp.csv")
rm(list=ls())
gdpE<-read.csv("GDPEx2.csv",stringsAsFactors = FALSE,skip=4)
eduE<-read.csv("EDUEx2.csv",stringsAsFactors = FALSE)
View(gdpE)
View(eduE)
merge(gdpE,eduE,by.x = "X",by.y = "CountryCode",all=TRUE)
comb<-merge(gdpE,eduE,by.x = "X",by.y = "CountryCode",all=TRUE)
?merge
comb<-merge(gdpE,eduE,by.x = "X",by.y = "CountryCode",all=FALSE)
View(comb)
names(comb)
write.csv(comb,"comb.csv")
?grep
grep("fiscal year",comb,ignore.case = TRUE)
grep("fiscal year",comb,ignore.case = TRUE, value=TRUE)
filcom<-grep("fiscal year",comb,ignore.case = TRUE, value=TRUE)
View(filcom)
head(filcom)
filcom<-grep("fiscal year"& "Jun",comb,ignore.case = TRUE, value=TRUE)
filcom<-grep("fiscal year"&& "Jun",comb,ignore.case = TRUE, value=TRUE)
filcom<-grep("Fiscal year end: Jun",comb,ignore.case = TRUE, value=TRUE)
filcom
filcom<-grep("Fiscal year end"+"Jun",comb,ignore.case = TRUE, value=TRUE)
filcom<-grep([Fiscal year end]+[Jun],comb,ignore.case = TRUE, value=TRUE)
subset(comb, grepl("Fiscal year end", Special.Notes))
filcomb<-subset(comb, grepl("Fiscal year end", Special.Notes))
count(filcom)
class(filcom)
library(quantmon)
install.packages("quantmod")
library(quantmon)
library("quantmon")
library(quantmod)
?help package=`quantmod-package`
?help packageName=quantmod
?help packageName=`quantmod-package`
help packageName=`quantmod-package`
help packageName=`quantmod`
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
class(amzn)
class(sampleTimes)
sampleTimes
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
library(lubridate)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
rm(list=ls())
setwd("C:/Users/User/Coursera/Cs3Wk4/UCI HAR Dataset")
library(dplyr)
library(reshape2)
X_train         <- read.table("train/X_train.txt")
features        <- read.table("features.txt")
features$V2
rm=list(ls())
rm(list=ls())
source('C:/Users/User/Coursera/Cs3Wk4/UCI HAR Dataset/run_analysis.R')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
